// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Format-C-eft/middleware/internal/database/cache (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	config "github.com/Format-C-eft/middleware/internal/config"
	cache "github.com/Format-C-eft/middleware/internal/database/cache"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DropSession mocks base method.
func (m *MockClient) DropSession(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropSession indicates an expected call of DropSession.
func (mr *MockClientMockRecorder) DropSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropSession", reflect.TypeOf((*MockClient)(nil).DropSession), arg0, arg1)
}

// FlushBase mocks base method.
func (m *MockClient) FlushBase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushBase")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushBase indicates an expected call of FlushBase.
func (mr *MockClientMockRecorder) FlushBase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushBase", reflect.TypeOf((*MockClient)(nil).FlushBase))
}

// GetListSession mocks base method.
func (m *MockClient) GetListSession(arg0, arg1 string, arg2 bool) (*[]cache.SessionDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]cache.SessionDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListSession indicates an expected call of GetListSession.
func (mr *MockClientMockRecorder) GetListSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListSession", reflect.TypeOf((*MockClient)(nil).GetListSession), arg0, arg1, arg2)
}

// GetSessionInfo mocks base method.
func (m *MockClient) GetSessionInfo(arg0 string) (*config.SessionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionInfo", arg0)
	ret0, _ := ret[0].(*config.SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionInfo indicates an expected call of GetSessionInfo.
func (mr *MockClientMockRecorder) GetSessionInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionInfo", reflect.TypeOf((*MockClient)(nil).GetSessionInfo), arg0)
}

// RefreshExpire mocks base method.
func (m *MockClient) RefreshExpire(arg0 *config.SessionInfo, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshExpire", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshExpire indicates an expected call of RefreshExpire.
func (mr *MockClientMockRecorder) RefreshExpire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshExpire", reflect.TypeOf((*MockClient)(nil).RefreshExpire), arg0, arg1)
}

// SaveSession mocks base method.
func (m *MockClient) SaveSession(arg0 *config.SessionInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockClientMockRecorder) SaveSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockClient)(nil).SaveSession), arg0)
}
